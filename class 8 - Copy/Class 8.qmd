---
title: "Class 8: PCA mini project"
author: "Jacqueline Cheung(A17085191)"
date: "2/2/2024"
format: pdf
editor: visual
---
## Exploratory data analysis 

Today we will do a complete analysis of some breast cancer biopsy data but first let's revisit the main PCA function in R `prcomp()` and see what `scale=TRUE/FALSE` does.

```{r}
head(mtcars)

```

Find the mean value per column of this dataset?

```{r}
apply(mtcars,2,sd)
```

It is clear "disp" and "hp" have the highest mean values and the highest standard deviation here. They will likely dominate any analysis I do on this dataset. Let's see

```{r}
pc.noscale <- prcomp(mtcars, scale = F)
pc.scale <- prcomp(mtcars, scale = T)
```

```{r}
biplot(pc.noscale)
```

```{r}
pc.noscale$rotation[,1]

```

Plot the loadings

```{r}
library(ggplot2)
r1<- as.data.frame(pc.noscale$rotation)
r1$names <- rownames(pc.noscale$rotation)

ggplot(r1)+
  aes(PC1, names)+
  geom_col()
```

```{r}
r2<- as.data.frame(pc.scale$rotation)
r2$names <- rownames(pc.scale$rotation)

ggplot(r2)+
  aes(PC1, names)+
  geom_col()
```

```{r}
biplot(pc.scale)
```

> **Take-home**: Generally we always want to set `scale=TRUE` when we do this type of analysis to avoid our analysis being dominated by individual variables with the largest variences just due to their unit of measurement.

# FNA breast cancer data

Load the data into R.

```{r}
wisc.df <- read.csv("WisconsinCancer.csv", row.names = 1)
head(wisc.df)
```

> Q1. How many observations are in this dataset?

```{r}
nrow(wisc.df)
```

> Q2. How many of the observations have a malignant diagnosis?

```{r}
sum(wisc.df$diagnosis == "M")


```

The `table()` function is super useful here

```{r}
table(wisc.df$diagnosis)
```

> Q3. How many variables/features in the data are suffixed with \_mean?

```{r}
colnames(wisc.df)
```

A useful function for this is `grep()`

```{r}
length(grep("_mean", colnames(wisc.df)))
```

> Q4. From your results, what proportion of the original variance is captured by the first principal components (PC1)?

0.4427 

> Q5. How many principal components (PCs) are required to describe at least 70% of the original variance in the data?

3 principal components needed

> Q6. How many principal components (PCs) are required to describe at least 90% of the original variance in the data?

7 principal components needed

Before we go any further, we need to exclude the diagnosis column from any future analysis - this tells us whether a sample to cancer or non-cancer

```{r}
diagnosis <- as.factor(wisc.df$diagnosis)
head(diagnosis)
```

```{r}
wisc.data <- wisc.df[,-1]
```

Let's see if we can cluster the `wisc.data` to find some structure in the dataset.

```{r}
hc <- hclust( dist(wisc.data))
plot(hc)
```

## Principal Component Analysis (PCA)

```{r}
wisc.pr <- prcomp(wisc.data, scale = T) 
summary(wisc.pr)
```

```{r}
biplot(wisc.pr)
```

>Q7. What stands out to you about this plot? Is it easy or difficult to understand? Why?

It has too much info and it is hard to understand.

This biplot sucks! We need to build our own PCA score plot of PC1 vs PC2

```{r}
attributes(wisc.pr)
```

```{r}
head(wisc.pr$x)
```

Plot of PC1 vs PC2 the first two columns

```{r}
plot(wisc.pr$x[,1], wisc.pr$x[,2], col=diagnosis)
```
> Q8. Generate a similar plot for principal components 1 and 3. What do you notice about these plots?

```{r}
plot(wisc.pr$x[,1], wisc.pr$x[,3], col=diagnosis)
```


Make a ggplot version of this score plot

```{r}
pc <- as.data.frame(wisc.pr$x)

ggplot(pc)+
  aes(x=PC1, y=PC2, col=diagnosis)+
  geom_point()
```

> Q9. For the first principal component, what is the component of the loading vector (i.e. wisc.pr\$rotation\[,1\]) for the feature concave.points_mean?

```{r}

wisc.pr$rotation["concave.points_mean", 1]

```

> Q10. What is the minimum number of principal components required to explain 80% of the variance of the data?

```{r}
wisc.pr <- prcomp(wisc.data, scale = T) 
summary(wisc.pr)

```
4 principal components required to explain 80% of the variance.

##Hierarchical clustering

>Q11. Using the plot() and abline() functions, what is the height at which the clustering model has 4 clusters?

```{r}
data.scaled <- scale(wisc.data)
data.dist <- dist(data.scaled)
wisc.hclust <- hclust(data.dist, method = "complete")
plot(wisc.hclust)
abline(h=19, col ="red", lty = 2)
```

```{r}
wisc.hclust.clusters <- cutree(wisc.hclust, k=4)
table(wisc.hclust.clusters, diagnosis)
```

> Q12. Can you find a better cluster vs diagnoses match by cutting into a different number of clusters between 2 and 10?

```{r}
wisc.hclust.clusters <- cutree(wisc.hclust, k=6)
table(wisc.hclust.clusters, diagnosis)
```

No, not really. There are still some clusters that have a lot of one diagnosese or none.

>Q13. Which method gives your favorite results for the same data.dist dataset? Explain your reasoning.

ward.D2 provides the best results as it gives a comprehensive clustering that is not as hard to understand as the complete clustering. 


## Combining methods

```{r}
wisc.pr.hclust <- hclust(dist(wisc.pr$x[, 1:7]), method = "ward.D2")
grps <- cutree(wisc.pr.hclust, k=2)
table(grps)
```

```{r}
plot(wisc.pr$x[,1:2], col=grps)
```
> Q15. How well does the newly created model with four clusters separate out the two diagnoses?

Cross table to see how my clustering corresponds to the expert diagnosis vector of M and B values

```{r}
table(grps, diagnosis)
```

>Q16. How well do the k-means and hierarchical clustering models you created in previous sections (i.e. before PCA) do in terms of separating the diagnoses? Again, use the table() function to compare the output of each model (wisc.km$cluster and wisc.hclust.clusters) with the vector containing the actual diagnoses.

```{r}
wisc.km <- kmeans(wisc.data, centers= 2, nstart=20 )
```

```{r}
table(wisc.km$cluster, diagnosis)
table(wisc.hclust.clusters, diagnosis)
```


Positive <- cancer M
Negative <- non-cancer B

True = cluster/grp 1
False = grp 2

True Pos = 177
False Pos = 18
True Neg = 339
False Neg = 35

We can use our PCA results(wisc.pr) to make predications on new unseen data.


```{r}
plot(wisc.pr$x[,1:2], col=diagnosis)
```

```{r}
#url <- "new_samples.csv"
url <- "https://tinyurl.com/new-samples-CSV"
new <- read.csv(url)
npc <- predict(wisc.pr, newdata=new)
npc
```
```{r}
plot(wisc.pr$x[,1:2], col=grps)
points(npc[,1], npc[,2], col="blue", pch=16, cex=3)
text(npc[,1], npc[,2], c(1,2), col="white")
```


```{r}
#install.packages("rgl"
library(rgl)
plot3d(wisc.pr$x[,1:2], xlab="PC 1", ylab="PC 2", zlab="PC 3", cex=1.5, size=1, type="s", col=grps)
```


